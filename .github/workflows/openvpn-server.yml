name: Guaranteed VPN Server

on:
  workflow_dispatch:
    inputs:
      vpn_type:
        description: 'Select VPN Type'
        required: true
        default: 'socks5'
        type: choice
        options:
        - 'socks5'
        - 'http'
        - 'ssh'

jobs:
  deploy-vpn:
    runs-on: ubuntu-latest
    steps:
    - name: Check Docker availability
      run: |
        echo "Docker version:"
        docker --version || echo "Docker not available"
        echo "Containerd version:"
        containerd --version || echo "Containerd not available"

    - name: Deploy selected VPN
      run: |
        case "${{ github.event.inputs.vpn_type }}" in
          "socks5")
            echo "Deploying SOCKS5 proxy..."
            docker run -d --name socks5 \
              -p 1080:1080 \
              serjs/go-socks5-proxy \
              -user admin \
              -password $(openssl rand -base64 12)
            echo "VPN_PORT=1080" >> $GITHUB_ENV
            ;;
          "http")
            echo "Deploying HTTP proxy..."
            docker run -d --name http-proxy \
              -p 3128:3128 \
              ubuntu/squid
            echo "VPN_PORT=3128" >> $GITHUB_ENV
            ;;
          "ssh")
            echo "Deploying SSH server..."
            SSH_PASS=$(openssl rand -base64 12)
            docker run -d --name ssh-server \
              -p 22:22 \
              -e PASSWORD=$SSH_PASS \
              linuxserver/openssh-server
            echo "VPN_PORT=22" >> $GITHUB_ENV
            echo "SSH_PASS=$SSH_PASS" >> $GITHUB_ENV
            ;;
        esac

    - name: Verify container running
      run: |
        sleep 5
        if docker ps | grep -q "${{ github.event.inputs.vpn_type }}"; then
          echo "‚úÖ Container is running successfully"
        else
          echo "‚ùå Container failed to start"
          docker logs ${{ github.event.inputs.vpn_type }} || echo "No logs available"
          exit 1
        fi

    - name: Setup Ngrok tunnel
      run: |
        # Download ngrok
        curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar xz
        chmod +x ngrok
        
        # Set auth token
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # Start tunnel
        ./ngrok tcp ${{ env.VPN_PORT }} > ngrok.log 2>&1 &
        sleep 10

    - name: Get connection info
      run: |
        sleep 10
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels || echo "{}")
        
        if echo "$TUNNEL_INFO" | grep -q 'tcp://'; then
          TUNNEL_URL=$(echo "$TUNNEL_INFO" | grep -o 'tcp://[^"]*' | head -1)
          SERVER_IP=$(echo "$TUNNEL_URL" | cut -d':' -f2 | sed 's#//##')
          SERVER_PORT=$(echo "$TUNNEL_URL" | cut -d':' -f3)
        else
          SERVER_IP="0.tcp.ngrok.io"
          SERVER_PORT="${{ env.VPN_PORT }}"
        fi
        
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
        echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV

    - name: Display connection details
      run: |
        echo "=========================================="
        echo "üöÄ VPN Server Ready!"
        echo "=========================================="
        echo "Type: ${{ github.event.inputs.vpn_type }}"
        echo "Server: ${{ env.SERVER_IP }}"
        echo "Port: ${{ env.SERVER_PORT }}"
        
        if [ "${{ github.event.inputs.vpn_type }}" = "ssh" ]; then
          echo "Username: root"
          echo "Password: ${{ env.SSH_PASS }}"
        fi
        
        echo "‚è∞ This server will be active for 6 hours"
        echo "=========================================="

    - name: Keep server alive
      run: |
        echo "üü¢ VPN server is running for 6 hours..."
        sleep 21600
