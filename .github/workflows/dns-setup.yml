name: Multi-Service Server Creator

on:
  workflow_dispatch:
    inputs:
      service_type:
        description: 'Select service to deploy'
        required: true
        default: 'v2ray'
        type: choice
        options:
        - v2ray
        - ssh
        - openvpn

jobs:
  deploy-service:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl unzip jq

    - name: Deploy selected service
      run: |
        case "${{ github.event.inputs.service_type }}" in
          "v2ray")
            echo "Deploying V2Ray service..."
            # نصب V2Ray
            curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh | sudo bash
            
            # ایجاد UUID و پیکربندی
            UUID=$(cat /proc/sys/kernel/random/uuid)
            sudo tee /usr/local/etc/v2ray/config.json > /dev/null << EOF
            {
              "inbounds": [{
                "port": 10086,
                "protocol": "vless",
                "settings": {
                  "clients": [{
                    "id": "$UUID",
                    "level": 0
                  }],
                  "decryption": "none"
                },
                "streamSettings": {
                  "network": "tcp",
                  "tcpSettings": {"header": {"type": "none"}}
                }
              }],
              "outbounds": [{
                "protocol": "freedom",
                "settings": {}
              }]
            }
            EOF
            
            # راه اندازی سرویس
            sudo systemctl start v2ray
            SERVICE_PORT=10086
            ;;
            
          "ssh")
            echo "Deploying SSH service..."
            # نصب و پیکربندی SSH
            sudo apt-get install -y openssh-server
            sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
            
            # ایجاد کاربر و رمز عبور
            SSH_PASSWORD=$(openssl rand -base64 12)
            echo "root:$SSH_PASSWORD" | sudo chpasswd
            echo "SSH_PASSWORD=$SSH_PASSWORD" >> $GITHUB_ENV
            
            sudo systemctl restart ssh
            SERVICE_PORT=22
            ;;
            
          "openvpn")
            echo "Deploying OpenVPN service..."
            # نصب OpenVPN و ابزارهای لازم
            sudo apt-get install -y openvpn easy-rsa
            
            # پیکربندی اولیه
            sudo make-cadir /etc/openvpn/easy-rsa
            cd /etc/openvpn/easy-rsa
            
            # تولید کلیدها و گواهی‌ها
            ./easyrsa init-pki
            ./easyrsa --batch build-ca nopass
            ./easyrsa gen-req server nopass
            ./easyrsa sign-req server server
            ./easyrsa gen-dh
            openvpn --genkey secret pki/ta.key
            
            # ایجاد پیکربندی سرور
            sudo tee /etc/openvpn/server.conf > /dev/null << EOF
            port 1194
            proto udp
            dev tun
            ca /etc/openvpn/easy-rsa/pki/ca.crt
            cert /etc/openvpn/easy-rsa/pki/issued/server.crt
            key /etc/openvpn/easy-rsa/pki/private/server.key
            dh /etc/openvpn/easy-rsa/pki/dh.pem
            server 10.8.0.0 255.255.255.0
            ifconfig-pool-persist /var/log/openvpn/ipp.txt
            keepalive 10 120
            tls-auth /etc/openvpn/easy-rsa/pki/ta.key 0
            cipher AES-256-CBC
            persist-key
            persist-tun
            status /var/log/openvpn/openvpn-status.log
            verb 3
            explicit-exit-notify 1
            EOF
            
            # فعال کردن IP forwarding
            sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
            sudo sysctl -p
            
            # راه اندازی سرویس
            sudo systemctl start openvpn@server
            SERVICE_PORT=1194
            ;;
        esac
        
        echo "SERVICE_PORT=$SERVICE_PORT" >> $GITHUB_ENV

    - name: Setup Ngrok tunnel
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        ./ngrok tcp ${{ env.SERVICE_PORT }} --log=stdout > ngrok.log 2>&1 &
        sleep 20

    - name: Get connection info
      run: |
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels | grep -o 'tcp://[^"]*' | head -1)
        SERVER_IP=$(echo "$TUNNEL_INFO" | cut -d':' -f2 | sed 's#//##')
        SERVER_PORT=$(echo "$TUNNEL_INFO" | cut -d':' -f3)
        
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
        echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV

    - name: Generate connection details
      run: |
        case "${{ github.event.inputs.service_type }}" in
          "v2ray")
            VLESS_LINK="vless://$UUID@${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}?security=none&type=tcp#GitHub-V2Ray"
            echo "CONNECTION_INFO=$VLESS_LINK" >> $GITHUB_ENV
            ;;
          "ssh")
            SSH_INFO="ssh root@${{ env.SERVER_IP }} -p ${{ env.SERVER_PORT }}"
            echo "Password: ${{ env.SSH_PASSWORD }}"
            echo "CONNECTION_INFO=$SSH_INFO" >> $GITHUB_ENV
            ;;
          "openvpn")
            echo "OpenVPN configuration required - download client config manually"
            echo "CONNECTION_INFO=OpenVPN Server: ${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}" >> $GITHUB_ENV
            ;;
        esac

    - name: Display connection details
      run: |
        echo "=========================================="
        echo "🚀 ${{ github.event.inputs.service_type | upcase }} SERVER READY!"
        echo "=========================================="
        echo "Server: ${{ env.SERVER_IP }}"
        echo "Port: ${{ env.SERVER_PORT }}"
        echo ""
        echo "🔗 Connection Info:"
        echo "${{ env.CONNECTION_INFO }}"
        
        if [ "${{ github.event.inputs.service_type }}" = "ssh" ]; then
          echo "Password: ${{ env.SSH_PASSWORD }}"
        fi
        
        echo "=========================================="

    - name: Keep server alive
      run: |
        echo "🟢 Server is running for 6 hours..."
        sleep 21600
