name: Personal DNS Server
on:
  workflow_dispatch:

jobs:
  dns-server:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq curl

    - name: Setup DNS Server
      run: |
        # ÿ™ŸàŸÇŸÅ ÿ≥ÿ±Ÿà€åÿ≥ Ÿæ€åÿ¥ ŸÅÿ±ÿ∂
        sudo systemctl stop systemd-resolved || true
        sudo systemctl disable systemd-resolved || true

        # ÿß€åÿ¨ÿßÿØ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ÿ¨ÿØ€åÿØ
        sudo tee /etc/dnsmasq.conf > /dev/null << EOF
        interface=*
        listen-address=127.0.0.1
        bind-interfaces
        server=8.8.8.8
        server=1.1.1.1
        address=/steam.com/104.112.119.210
        address=/epicgames.com/104.16.109.18
        no-hosts
        no-resolv
        cache-size=1000
        EOF

        # ÿ±ÿßŸá ÿßŸÜÿØÿßÿ≤€å ŸÖÿ¨ÿØÿØ ÿ≥ÿ±Ÿà€åÿ≥
        sudo systemctl restart dnsmasq
        sudo systemctl enable dnsmasq
        
        # ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥
        sleep 3
        sudo systemctl status dnsmasq --no-pager
        echo "‚úÖ DNS Server configured successfully!"

    - name: Verify DNS is working
      run: |
        # ÿ™ÿ≥ÿ™ DNS ÿ≥ÿ±Ÿàÿ±
        nslookup steam.com 127.0.0.1
        nslookup epicgames.com 127.0.0.1
        echo "‚úÖ DNS queries are working!"

    - name: Setup Ngrok Tunnel
      run: |
        # ÿØÿßŸÜŸÑŸàÿØ Ÿà ÿ™ŸÜÿ∏€åŸÖ Ngrok
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # ÿ±ÿßŸá ÿßŸÜÿØÿßÿ≤€å ÿ™ŸàŸÜŸÑ ÿ®ÿ±ÿß€å ŸæŸàÿ±ÿ™ 53
        ./ngrok tcp 53 --log=stdout > ngrok.log &
        sleep 15
        
        # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ŸàŸÜŸÑ ÿ®ÿØŸàŸÜ jq
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels || echo "")
        if [ -n "$TUNNEL_INFO" ]; then
            # ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ grep Ÿà sed ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßÿ∑ŸÑÿßÿπÿßÿ™
            TUNNEL_URL=$(echo "$TUNNEL_INFO" | grep -o '"public_url":"[^"]*' | cut -d'"' -f4 | head -1)
            if [ -n "$TUNNEL_URL" ]; then
                DNS_IP=$(echo "$TUNNEL_URL" | cut -d':' -f2 | sed 's#//##')
                DNS_PORT=$(echo "$TUNNEL_URL" | cut -d':' -f3)
                echo "üåê DNS Tunnel Established!"
                echo "üî¢ IP Address: $DNS_IP"
                echo "üîå Port: $DNS_PORT"
                echo "DNS_IP=$DNS_IP" >> $GITHUB_ENV
                echo "DNS_PORT=$DNS_PORT" >> $GITHUB_ENV
            else
                echo "‚ö†Ô∏è Could not parse tunnel information"
                echo "Trying alternative method..."
                
                # ÿ±Ÿàÿ¥ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßÿ∑ŸÑÿßÿπÿßÿ™
                ALTERNATIVE_IP=$(curl -s http://localhost:4040/api/tunnels | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
                if [ -n "$ALTERNATIVE_IP" ]; then
                    echo "üåê Found IP: $ALTERNATIVE_IP"
                    echo "üîå Default Port: 53"
                    echo "DNS_IP=$ALTERNATIVE_IP" >> $GITHUB_ENV
                    echo "DNS_PORT=53" >> $GITHUB_ENV
                else
                    echo "‚ùå Failed to get tunnel information"
                    echo "Ngrok log:"
                    cat ngrok.log || echo "No ngrok log found"
                fi
            fi
        else
            echo "‚ö†Ô∏è Could not get tunnel information"
            echo "Checking ngrok process..."
            ps aux | grep ngrok || echo "No ngrok process found"
        fi

    - name: Display Connection Info
      run: |
        echo "=========================================="
        echo "‚úÖ PERSONAL DNS SERVER IS READY!"
        echo "=========================================="
        if [ -n "${{ env.DNS_IP }}" ]; then
            echo "üî¢ DNS IP: ${{ env.DNS_IP }}"
            echo "üîå DNS Port: ${{ env.DNS_PORT }}"
            echo "üì± Use this in your DNS changer app:"
            echo "Primary DNS: ${{ env.DNS_IP }}"
            echo "=========================================="
            echo "üéØ Test with: nslookup steam.com ${{ env.DNS_IP }}"
        else
            echo "‚ö†Ô∏è Could not get DNS IP. Check ngrok connection."
            echo "=========================================="
        fi

    - name: Keep alive
      run: |
        echo "üü¢ DNS Server is running..."
        echo "‚è∞ Press Ctrl+C in log to stop the workflow"
        echo "üìä Testing connection every 30 seconds:"
        
        # ŸÜ⁄ØŸáÿØÿßÿ±€å ÿßÿ¨ÿ±ÿß ÿ®ÿß ÿ™ÿ≥ÿ™ ÿØŸàÿ±Ÿá‚Äåÿß€å
        while true; do
            if [ -n "${{ env.DNS_IP }}" ]; then
                # ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ DNS
                if nslookup steam.com ${{ env.DNS_IP }} >/dev/null 2>&1; then
                    echo "‚úÖ Connection working at $(date +'%H:%M:%S')"
                else
                    echo "‚ùå Connection failed at $(date +'%H:%M:%S')"
                fi
            fi
            sleep 30
        done
