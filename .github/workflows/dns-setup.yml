name: Mobile Legends DNS Server
on:
  workflow_dispatch:

jobs:
  dns-server:
    runs-on: ubuntu-latest
    steps:
    - name: Install Python and required packages
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        pip3 install dnspython

    - name: Create Python DNS Server
      run: |
        cat > dns_server.py << 'EOF'
#!/usr/bin/env python3
import socketserver
import dns.resolver
import dns.message
import dns.rdataclass
import dns.rdatatype

# DNS mapping for Mobile Legends and games
DNS_MAPPING = {
    'mlbb.com': '104.16.121.233',
    'mobilelegends.com': '104.18.122.45', 
    'moonton.com': '104.18.123.456',
    'steam.com': '104.112.119.210',
    'epicgames.com': '104.16.109.18',
    'origin.com': '104.112.119.210',
    'battle.net': '104.16.109.18'
}

class DNSHandler(socketserver.BaseRequestHandler):
    def handle(self):
        data = self.request[0]
        socket = self.request[1]
        
        try:
            request = dns.message.from_wire(data)
            query_name = str(request.question[0].name).lower()
            
            response = dns.message.make_response(request)
            
            if query_name in DNS_MAPPING:
                # پاسخ با IP از mapping
                ip = DNS_MAPPING[query_name]
                rrset = dns.rrset.from_text(
                    request.question[0].name,
                    300,  # TTL
                    dns.rdataclass.IN,
                    dns.rdatatype.A,
                    ip
                )
                response.answer.append(rrset)
            else:
                # فوروارد به DNS عمومی
                resolver = dns.resolver.Resolver()
                resolver.nameservers = ['8.8.8.8', '1.1.1.1']
                answer = resolver.resolve(query_name, 'A')
                for rdata in answer:
                    rrset = dns.rrset.from_text(
                        request.question[0].name,
                        300,
                        dns.rdataclass.IN, 
                        dns.rdatatype.A,
                        str(rdata)
                    )
                    response.answer.append(rrset)
            
            socket.sendto(response.to_wire(), self.client_address)
            print(f"✅ DNS Query: {query_name}")
            
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    print("🚀 Starting Python DNS Server on port 5353...")
    print("📱 Mobile Legends DNS Ready!")
    server = socketserver.UDPServer(('0.0.0.0', 5353), DNSHandler)
    server.serve_forever()
EOF

        chmod +x dns_server.py
        echo "✅ Python DNS Server created"

    - name: Start Python DNS Server
      run: |
        # اجرای DNS سرور در پس‌زمینه
        nohup python3 dns_server.py > dns.log 2>&1 &
        echo $! > dns.pid
        sleep 5
        
        # تست DNS سرور
        echo "Testing DNS server..."
        nslookup mlbb.com 127.0.0.1 -port=5353 && echo "✅ Mobile Legends DNS working!"
        nslookup google.com 127.0.0.1 -port=5353 && echo "✅ General DNS working!"

    - name: Download and setup Ngrok
      run: |
        # دانلود ngrok
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        # تنظیم auth token
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # راه اندازی تونل برای پورت 5353
        ./ngrok tcp 5353 --log=stdout > ngrok.log 2>&1 &
        echo $! > ngrok.pid
        echo "🔄 Starting ngrok tunnel..."
        sleep 25

    - name: Get connection information
      run: |
        # دریافت اطلاعات تونل
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null || echo "{}")
        TUNNEL_URL=$(echo "$TUNNEL_INFO" | grep -o 'tcp://[^"]*' | head -1 || echo "")
        
        if [ -n "$TUNNEL_URL" ]; then
            DNS_IP=$(echo "$TUNNEL_URL" | cut -d':' -f2 | sed 's#//##')
            DNS_PORT=$(echo "$TUNNEL_URL" | cut -d':' -f3)
        else
            DNS_IP="0.tcp.ngrok.io"
            DNS_PORT=$(grep -o "url=tcp://[^ ]*" ngrok.log | head -1 | cut -d':' -f3 | cut -d' ' -f1 || echo "5353")
        fi
        
        echo "DNS_IP=$DNS_IP" >> $GITHUB_ENV
        echo "DNS_PORT=$DNS_PORT" >> $GITHUB_ENV

    - name: Display connection info
      run: |
        echo "=========================================="
        echo "🎯 MOBILE LEGENDS DNS SERVER READY!"
        echo "=========================================="
        echo "📱 برای DNS Changer گوشی:"
        echo "Primary DNS: ${{ env.DNS_IP }}"
        echo "Port: ${{ env.DNS_PORT }}"
        echo ""
        echo "🔧 تست اتصال:"
        echo "nslookup mlbb.com ${{ env.DNS_IP }} -port=${{ env.DNS_PORT }}"
        echo ""
        echo "✨ مخصوص بازی Mobile Legends"
        echo "=========================================="

    - name: Keep alive
      run: |
        echo "🟢 DNS Server is running..."
        echo "💡 برای قطع کردن: Cancel workflow را بزنید"
        echo ""
        
        # اجرای بی‌نهایت برای نگه‌داری workflow
        while true; do
            # بررسی وضعیت سرویس‌ها
            if [ -f "dns.pid" ] && ps -p $(cat dns.pid) >/dev/null 2>&1; then
                echo "✅ Python DNS: Active - $(date +'%H:%M:%S')"
            else
                echo "🔄 Restarting DNS server..."
                nohup python3 dns_server.py > dns.log 2>&1 &
                echo $! > dns.pid
            fi
            
            if [ -f "ngrok.pid" ] && ps -p $(cat ngrok.pid) >/dev/null 2>&1; then
                echo "✅ Ngrok Tunnel: Active - $(date +'%H:%M:%S')"
            else
                echo "🔄 Restarting Ngrok..."
                ./ngrok tcp 5353 --log=stdout > ngrok.log 2>&1 &
                echo $! > ngrok.pid
            fi
            
            # تست اتصال هر 30 ثانیه
            sleep 30
        done
