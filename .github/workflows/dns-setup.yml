name: Personal DNS Server
on:
  workflow_dispatch:

jobs:
  dns-server:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq curl

    - name: Setup DNS Server
      run: |
        # ÿ™ŸàŸÇŸÅ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å conflicting
        sudo systemctl stop systemd-resolved || true
        sudo systemctl disable systemd-resolved || true
        
        # ÿ¢ÿ≤ÿßÿØ ⁄©ÿ±ÿØŸÜ ŸæŸàÿ±ÿ™ 53
        sudo fuser -k 53/udp || true
        sudo fuser -k 53/tcp || true

        # ÿß€åÿ¨ÿßÿØ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å dnsmasq
        sudo tee /etc/dnsmasq.conf > /dev/null << EOF
        interface=*
        listen-address=0.0.0.0
        bind-interfaces
        server=8.8.8.8
        server=1.1.1.1
        address=/steam.com/104.112.119.210
        address=/epicgames.com/104.16.109.18
        no-hosts
        no-resolv
        cache-size=1000
        EOF

        # ÿ±ÿßŸá ÿßŸÜÿØÿßÿ≤€å dnsmasq
        sudo systemctl restart dnsmasq
        sleep 3
        
        # ÿ™ÿ≥ÿ™ DNS
        echo "Testing DNS server..."
        nslookup steam.com 127.0.0.1 && echo "‚úÖ DNS is working!"

    - name: Setup Ngrok (Simple Method)
      run: |
        # ÿØÿßŸÜŸÑŸàÿØ ngrok
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        # ÿ™ŸÜÿ∏€åŸÖ auth token
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # ÿ±ÿßŸá ÿßŸÜÿØÿßÿ≤€å ÿ™ŸàŸÜŸÑ ÿØÿ± Ÿæÿ≥‚Äåÿ≤ŸÖ€åŸÜŸá
        ./ngrok tcp 53 --log=stdout > ngrok.log 2>&1 &
        NGORK_PID=$!
        echo $NGORK_PID > ngrok.pid
        
        # ŸÖŸÜÿ™ÿ∏ÿ± ŸÖÿßŸÜÿØŸÜ ÿ®ÿ±ÿß€å ÿ±ÿßŸá ÿßŸÜÿØÿßÿ≤€å ÿ™ŸàŸÜŸÑ
        echo "Waiting for ngrok to start..."
        sleep 20
        
        # ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ngrok
        if ps -p $NGORK_PID > /dev/null; then
            echo "‚úÖ Ngrok is running successfully!"
        else
            echo "‚ùå Ngrok failed to start"
            cat ngrok.log
            exit 1
        fi

    - name: Get Connection Info
      run: |
        # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ŸàŸÜŸÑ ÿ®Ÿá ÿµŸàÿ±ÿ™ ŸÖÿ≥ÿ™ŸÇ€åŸÖ
        echo "Getting tunnel information..."
        sleep 10
        
        # ÿ±Ÿàÿ¥ ÿ≥ÿßÿØŸá ÿ®ÿ±ÿß€å ÿØÿ±€åÿßŸÅÿ™ ÿ¢ÿØÿ±ÿ≥
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels || echo "")
        
        if [ -n "$TUNNEL_INFO" ]; then
            # ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿ±Ÿàÿ¥ ÿ≥ÿßÿØŸá ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨
            TUNNEL_URL=$(echo "$TUNNEL_INFO" | grep -o 'tcp://[^"]*' | head -1)
            if [ -n "$TUNNEL_URL" ]; then
                DNS_IP=$(echo "$TUNNEL_URL" | cut -d':' -f2 | sed 's#//##')
                DNS_PORT=$(echo "$TUNNEL_URL" | cut -d':' -f3)
                echo "üåê TUNNEL_URL: $TUNNEL_URL"
                echo "üî¢ DNS_IP: $DNS_IP"
                echo "üîå DNS_PORT: $DNS_PORT"
                echo "DNS_IP=$DNS_IP" >> $GITHUB_ENV
                echo "DNS_PORT=$DNS_PORT" >> $GITHUB_ENV
            else
                # ÿ±Ÿàÿ¥ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ: ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ log file
                echo "Trying alternative method from log file..."
                LOG_IP=$(grep -o 'url=[^ ]*' ngrok.log | grep -o 'tcp://[^ ]*' | head -1 | cut -d':' -f2 | sed 's#//##')
                if [ -n "$LOG_IP" ]; then
                    echo "üåê Found IP from log: $LOG_IP"
                    echo "DNS_IP=$LOG_IP" >> $GITHUB_ENV
                    echo "DNS_PORT=53" >> $GITHUB_ENV
                else
                    echo "‚ö†Ô∏è Using default ngrok domain"
                    echo "DNS_IP=0.tcp.ngrok.io" >> $GITHUB_ENV
                    echo "DNS_PORT=53" >> $GITHUB_ENV
                fi
            fi
        else
            echo "‚ö†Ô∏è Using fallback ngrok address"
            echo "DNS_IP=0.tcp.ngrok.io" >> $GITHUB_ENV
            echo "DNS_PORT=53" >> $GITHUB_ENV
        fi

    - name: Display Final Info
      run: |
        echo "=========================================="
        echo "üéØ YOUR PERSONAL DNS SERVER IS READY!"
        echo "=========================================="
        echo "üî¢ DNS IP: ${{ env.DNS_IP }}"
        echo "üîå DNS Port: ${{ env.DNS_PORT }}"
        echo ""
        echo "üì± ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ DNS Changer ⁄ØŸàÿ¥€å:"
        echo "Primary DNS: ${{ env.DNS_IP }}"
        echo "Port: ${{ env.DNS_PORT }}"
        echo ""
        echo "üîß Test connection:"
        echo "nslookup steam.com ${{ env.DNS_IP }}"
        echo "=========================================="

    - name: Keep alive with health checks
      run: |
        echo "üü¢ DNS Server is running..."
        echo "üí° Press the 'Cancel workflow' button to stop"
        echo ""
        
        COUNTER=0
        while true; do
            COUNTER=$((COUNTER + 1))
            echo "‚è∞ Running for $((COUNTER * 30)) seconds..."
            
            # ÿ™ÿ≥ÿ™ ÿ≥ŸÑÿßŸÖÿ™
            if nslookup steam.com 127.0.0.1 >/dev/null 2>&1; then
                echo "‚úÖ DNS: Healthy"
            else
                echo "‚ùå DNS: Not responding"
            fi
            
            # ÿ®ÿ±ÿ±ÿ≥€å ngrok
            if [ -f "ngrok.pid" ] && ps -p $(cat ngrok.pid) >/dev/null; then
                echo "‚úÖ Ngrok: Running"
            else
                echo "‚ùå Ngrok: Stopped"
            fi
            
            sleep 30
        done
