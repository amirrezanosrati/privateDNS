name: Multi-Service Server Creator

on:
  workflow_dispatch:
    inputs:
      service_type:
        description: 'Select service to deploy'
        required: true
        default: 'v2ray'
        type: choice
        options:
          - v2ray
          - ssh
          - openvpn

env:
  SERVICE_TYPE: ${{ github.event.inputs.service_type }}

jobs:
  deploy-service:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl unzip jq

    - name: Determine selected service
      run: |
        echo "Selected service: $SERVICE_TYPE"
        echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV

    - name: Deploy V2Ray service
      if: env.SERVICE_TYPE == 'v2ray'
      run: |
        echo "Deploying V2Ray service..."
        
        # نصب V2Ray
        curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh | sudo bash
        
        # ایجاد UUID و پیکربندی
        UUID=$(cat /proc/sys/kernel/random/uuid)
        echo "UUID=$UUID" >> $GITHUB_ENV
        
        sudo tee /usr/local/etc/v2ray/config.json > /dev/null << EOF
{
  "inbounds": [{
    "port": 10086,
    "protocol": "vless",
    "settings": {
      "clients": [{
        "id": "$UUID",
        "level": 0
      }],
      "decryption": "none"
    },
    "streamSettings": {
      "network": "tcp",
      "tcpSettings": {"header": {"type": "none"}}
    }
  }],
  "outbounds": [{
    "protocol": "freedom",
    "settings": {}
  }]
}
EOF
        
        # راه اندازی سرویس
        sudo systemctl start v2ray
        echo "SERVICE_PORT=10086" >> $GITHUB_ENV

    - name: Deploy SSH service
      if: env.SERVICE_TYPE == 'ssh'
      run: |
        echo "Deploying SSH service..."
        
        # نصب و پیکربندی SSH
        sudo apt-get install -y openssh-server
        sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        
        # ایجاد کاربر و رمز عبور
        SSH_PASSWORD=$(openssl rand -base64 12)
        echo "root:$SSH_PASSWORD" | sudo chpasswd
        echo "SSH_PASSWORD=$SSH_PASSWORD" >> $GITHUB_ENV
        
        sudo systemctl restart ssh
        echo "SERVICE_PORT=22" >> $GITHUB_ENV

    - name: Deploy OpenVPN service
      if: env.SERVICE_TYPE == 'openvpn'
      run: |
        echo "Deploying OpenVPN service..."
        
        # نصب OpenVPN و ابزارهای لازم
        sudo apt-get install -y openvpn easy-rsa
        
        # پیکربندی اولیه
        sudo make-cadir /etc/openvpn/easy-rsa
        cd /etc/openvpn/easy-rsa
        
        # تولید کلیدها و گواهی‌ها
        ./easyrsa init-pki
        echo -e "\n\n" | ./easyrsa build-ca nopass
        ./easyrsa gen-req server nopass
        echo "yes" | ./easyrsa sign-req server server
        ./easyrsa gen-dh
        openvpn --genkey secret pki/ta.key
        
        # ایجاد پیکربندی سرور
        sudo tee /etc/openvpn/server.conf > /dev/null << EOF
port 1194
proto udp
dev tun
ca /etc/openvpn/easy-rsa/pki/ca.crt
cert /etc/openvpn/easy-rsa/pki/issued/server.crt
key /etc/openvpn/easy-rsa/pki/private/server.key
dh /etc/openvpn/easy-rsa/pki/dh.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist /var/log/openvpn/ipp.txt
keepalive 10 120
tls-auth /etc/openvpn/easy-rsa/pki/ta.key 0
cipher AES-256-CBC
persist-key
persist-tun
status /var/log/openvpn/openvpn-status.log
verb 3
explicit-exit-notify 1
EOF
        
        # فعال کردن IP forwarding
        sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
        sudo sysctl -p
        
        # راه اندازی سرویس
        sudo systemctl start openvpn@server
        echo "SERVICE_PORT=1194" >> $GITHUB_ENV

    - name: Setup Ngrok tunnel
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        ./ngrok tcp ${{ env.SERVICE_PORT }} --log=stdout > ngrok.log 2>&1 &
        sleep 10

    - name: Get connection info
      run: |
        # انتظار برای راه اندازی ngrok
        sleep 10
        
        # دریافت اطلاعات تونل
        TUNNEL_INFO=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp") | .public_url')
        
        if [ -n "$TUNNEL_INFO" ]; then
            SERVER_IP=$(echo "$TUNNEL_INFO" | cut -d':' -f2 | sed 's#//##')
            SERVER_PORT=$(echo "$TUNNEL_INFO" | cut -d':' -f3)
        else
            echo "Failed to get ngrok tunnel info, using defaults"
            SERVER_IP="0.tcp.ngrok.io"
            SERVER_PORT="10086"
        fi
        
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
        echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV

    - name: Generate connection details
      run: |
        case "$SERVICE_TYPE" in
          "v2ray")
            VLESS_LINK="vless://$UUID@$SERVER_IP:$SERVER_PORT?security=none&type=tcp#GitHub-V2Ray"
            echo "CONNECTION_INFO=$VLESS_LINK" >> $GITHUB_ENV
            ;;
          "ssh")
            SSH_INFO="ssh root@$SERVER_IP -p $SERVER_PORT"
            echo "CONNECTION_INFO=$SSH_INFO" >> $GITHUB_ENV
            ;;
          "openvpn")
            OVPN_INFO="OpenVPN Server: $SERVER_IP:$SERVER_PORT (UDP)"
            echo "CONNECTION_INFO=$OVPN_INFO" >> $GITHUB_ENV
            ;;
        esac

    - name: Display connection details
      run: |
        echo "=========================================="
        echo "🚀 $SERVICE_TYPE SERVER READY!"
        echo "=========================================="
        echo "Server: $SERVER_IP"
        echo "Port: $SERVER_PORT"
        echo ""
        echo "🔗 Connection Info:"
        echo "$CONNECTION_INFO"
        
        if [ "$SERVICE_TYPE" = "ssh" ]; then
          echo "Password: $SSH_PASSWORD"
          echo "Warning: This is a temporary SSH server with root login enabled!"
        fi
        
        if [ "$SERVICE_TYPE" = "openvpn" ]; then
          echo "Note: You need to download and configure OpenVPN client separately"
        fi
        
        echo "=========================================="
        echo "⚠️  This server will be active for 6 hours"
        echo "=========================================="

    - name: Keep server alive
      run: |
        echo "🟢 Server is running for 6 hours..."
        # نگه داشتن سرور فعال به مدت 6 ساعت
        sleep 21600
